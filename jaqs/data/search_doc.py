# encoding=utf-8

import pandas as pd


def get_doc():
    data = pd.read_csv("built_in_funcs_docs.csv").to_dict()
    print(data)

class Search_funcs_doc(object):
    def __init__(self):
        self.doc = pd.DataFrame(data={'分类': {0: '四则运算', 1: '四则运算', 2: '四则运算', 3: '四则运算', 4: '基本数学函数', 5: '基本数学函数', 6: '基本数学函数', 7: '基本数学函数', 8: '基本数学函数', 9: '基本数学函数', 10: '基本数学函数', 11: '基本数学函数', 12: '逻辑运算', 13: '逻辑运算', 14: '逻辑运算', 15: '逻辑运算', 16: '逻辑运算', 17: '逻辑运算', 18: '逻辑运算', 19: '逻辑运算', 20: '逻辑运算', 21: '逻辑运算', 22: '三角函数', 23: '三角函数', 24: '三角函数', 25: '三角函数', 26: '取整函数', 27: '取整函数', 28: '取整函数', 29: '选择函数', 30: '选择函数', 31: '选择函数', 32: '时间序列函数 - 基本数学运算', 33: '时间序列函数 - 基本数学运算', 34: '时间序列函数 - 基本数学运算', 35: '时间序列函数 - 基本数学运算', 36: '时间序列函数 - 基本数学运算', 37: '时间序列函数 - 基本数学运算', 38: '时间序列函数 - 统计', 39: '时间序列函数 - 统计', 40: '时间序列函数 - 统计', 41: '时间序列函数 - 统计', 42: '时间序列函数 - 统计', 43: '时间序列函数 - 统计', 44: '时间序列函数 - 统计', 45: '时间序列函数 - 排名', 46: '时间序列函数 - 排名', 47: '时间序列函数 - 排名', 48: '时间序列函数 - 排名', 49: '横截面函数 - 排名', 50: '横截面函数 - 排名', 51: '横截面函数 - 排名', 52: '横截面函数 - 排名', 53: '横截面函数 - 排名', 54: '横截面函数 - 排名', 55: '横截面函数 - 排名', 56: '横截面函数 - 数据处理', 57: '横截面函数 - 数据处理', 58: '财报函数', 59: '财报函数', 60: '其他', 61: '其他', 62: '其他', 63: '其他', 64: '其他', 65: '时间序列函数 - 统计', 66: '时间序列函数 - 统计', 67: '技术指标'}, '说明': {0: '加法运算', 1: '减法运算', 2: '乘法运算', 3: '除法运算', 4: '符号函数，返回值为{-1, 0, 1}', 5: '绝对值函数', 6: '自然对数', 7: '对x取负', 8: '幂函数', 9: '幂函数x^y', 10: '保持符号的幂函数，等价于Sign(x) * (Abs(x)^e)', 11: '取余函数', 12: '判断是否相等', 13: '判断是否不等', 14: '大于', 15: '小于', 16: '大于等于', 17: '小于等于', 18: '逻辑与', 19: '逻辑或', 20: '逻辑非', 21: '判断值是否为NaN', 22: '正弦函数', 23: '余弦函数', 24: '正切函数', 25: '开平方函数', 26: '向上取整', 27: '向下取整', 28: '四舍五入', 29: '取 x 和 y 同位置上的较大值组成新的DataFrame返回', 30: '取 x 和 y 同位置上的较小值组成新的DataFrame返回', 31: 'cond为True取x的值，反之取y的值', 32: '指标n个周期前的值', 33: '指标在过去n天的和', 34: '指标在过去 n 天的积', 35: '指标当前值与n天前的值的差', 36: '计算指标相比n天前的变化率，默认计算百分比变化率；当log为1时，计算对数变化率;为0时计算普通变化率', 37: '计算指标在过去n天的平均值', 38: '指标在过去n天的标准差', 39: '两个指标在过去n天的协方差', 40: '两个指标在过去n天的相关系数', 41: '计算指标在过去n天的最小值', 42: '计算指标在过去n天的最大值', 43: '计算指标在过去n天的偏度', 44: '计算指标在过去n天的峰度', 45: '计算指标在过去n天的排名，返回值为名次', 46: '计算指标在过去n天的百分比，返回值为[0.0, 1.0]', 47: '计算指标在过去n天所属的quantile，返回值为表示quantile的整数', 48: '指数移动平均，以halflife的衰减对x进行指数移动平均', 49: '将指标值在横截面方向排名，返回值为名次', 50: '按分组数据g在每组内将指标值在横截面方向排名，返回值为名次', 51: '将指标值在横截面方向排名，返回值为排名百分比', 52: '按分组数据g在每组内将指标值在横截面方向排名，返回值为排名百分比', 53: '和Rank函数相同，但只有 cond 中值为True的标的参与排名', 54: '根据指标值在横截面方向将标的分成n个quantile，返回值为所属quantile', 55: '按分组数据g在每组内根据指标值在横截面方向将标的分成n个quantile，返回值为所属quantile', 56: '将指标标准化，即在横截面上减去平均值后再除以标准差', 57: '将指标横截面上去极值，用MAD (Maximum Absolute Deviation)方法, z_score为极值判断标准', 58: '将累计财务数据转换为单季财务数据', 59: '从累计财务数据计算TTM的财务数据', 60: '过去 n 天的指数衰减函数，其中 f 是平滑因子。这里 f 是平滑因子，可以赋一个小于 1 的值。Decay_exp(x, f, n) = (x[date] + x[date - 1] * f + … +x[date – n - 1] * (f (n – 1))) / (1 + f + … + f ^ (n - 1))', 61: '过去n天的线性衰减函数。Decay_linear(x, n) = (x[date] * n + x[date - 1] * (n - 1) + … + x[date – n - 1]) / (n + (n - 1) + … + 1)', 62: '如果 x 的值介于 lower 和 upper，则将其设定为 newval', 63: 'Step(n) 为每个标的创建一个向量，向量中 n 代表最新日期，n-1 代表前一天，以此类推。', 64: '时间序列函数，计算 x 中的值在过去 n 天中为 nan （非数字）的次数', 65: '计算指标在过去n天最大值的坐标', 66: '计算指标在过去n天最小值的坐标', 67: '根据talib技术指标库计算x中每只股票的技术指标'}, '公式': {0: '+', 1: '-', 2: '*', 3: '/', 4: 'Sign(x)', 5: 'Abs(x)', 6: 'Log(x)', 7: '-x', 8: '^', 9: 'Pow(x,y)', 10: 'SignedPower(x,e)', 11: '%', 12: '==', 13: '!=', 14: '>', 15: '<', 16: '>=', 17: '<=', 18: '&&', 19: '||', 20: '!', 21: 'IsNan(x)', 22: 'Sin(x)', 23: 'Cos(x)', 24: 'Tan(x)', 25: 'Sqrt(x)', 26: 'Ceil(x)', 27: 'Floor(x)', 28: 'Round(x)', 29: 'Max(x,y)', 30: 'Min(x,y)', 31: 'If(cond,x,y)', 32: 'Delay(x,n)', 33: 'Ts_Sum(x,n)', 34: 'Ts_Product(x,n)', 35: 'Delta(x,n)', 36: 'Return(x,n,log)', 37: 'Ts_Mean(x，n)', 38: 'StdDev(x,n)', 39: 'Covariance(x,y,n)', 40: 'Correlation(x,y,n)', 41: 'Ts_Min(x，n)', 42: 'Ts_Max(x，n)', 43: 'Ts_Skewness(x，n)', 44: 'Ts_Kurtosis(x，n)', 45: 'Ts_Rank(x, n)', 46: 'Ts_Percentile(x, n)', 47: 'Ts_Quantile(x, n)', 48: 'Ewma(x, halflife)', 49: 'Rank(x)', 50: 'GroupRank(x,g)', 51: 'Percentile(x)', 52: 'GroupPercentile(x, g, n)', 53: 'ConditionRank(x, cond)', 54: 'Quantile(x, n)', 55: 'GroupQuantile(x, g, n)', 56: 'Standardize(x)', 57: 'Cutoff(x, z_score)', 58: 'CumToSingle(x)', 59: 'TTM(x)', 60: 'Decay_exp(x,f,n)', 61: 'Decay_linear(x,n)', 62: 'Tail(x, lower, upper, newval)', 63: 'Step(n)', 64: 'CountNans(x,n)', 65: 'Ts_Argmax(x,n)', 66: 'Ts_Argmin(x,n)', 67: 'Ta(ta_method,ta_column,open,high,low,close,volume,*args)'}, '示例': {0: 'close + open', 1: 'close - open', 2: 'vwap * volume', 3: 'close / open', 4: 'Sign(close-open)', 5: 'Abs(close-open)', 6: 'Log(close/open)', 7: '-close', 8: 'close ^ 2', 9: 'Pow(close,2)', 10: 'SignedPower(close-open, 0.5)', 11: 'oi % 10', 12: 'close == open', 13: 'close != open', 14: 'close > open', 15: 'close < open', 16: 'close >= open', 17: 'close <= open', 18: '(close > open) && (close > vwap)', 19: '(close > open) || (close > vwap)', 20: '!(close>open)', 21: 'IsNan(net_profit)', 22: 'Sin(close/open)', 23: 'Cos(close/open)', 24: 'Tan(close/open)', 25: 'Sqrt(close^2 + open^2)', 26: 'Ceil(high)', 27: 'Floor(low)', 28: 'Round（close）', 29: 'Max(close, open)', 30: 'Min(close,open)', 31: 'If(close > open, close, open) 表示取open和close的较大值', 32: 'Delay(close,1) 表示前一天收盘价', 33: 'Ts_Sum(volume,5) 表示一周成交量', 34: 'Ts_Product(close/Delay(close,1),5) - 1 表示过去5天累计收益', 35: 'Delta(close,5)', 36: 'Return(close,5,True)计算一周对数收益', 37: 'Ts_Mean(close,5)', 38: 'StdDev(close/Delay(close,1)-1, 10)', 39: 'Covariance(close, open, 10)', 40: 'Correlation(close,open, 10)', 41: 'Ts_Min(close，5)', 42: 'Ts_Max(close，5)', 43: 'Ts_Skewness(close，20)', 44: 'Ts_Kurtosis(close，20)', 45: 'Ts_Rank(close, 5)', 46: 'Ts_Percentile(close, 5)', 47: 'Ts_Quantile(close, 5)', 48: 'Ewma(x, 3)', 49: 'Rank( close/Delay(close,1)-1 ) 表示按日收益率进行排名', 50: 'GroupRank(close/Delay(close,1)-1, g) 表示按分组g根据日收益率进行分组排名', 51: 'Percentile(close)', 52: 'GroupPercentile(close, sw1) 按申万1级行业', 53: 'GroupRank(close/Delay(close,1)-1, cond) 表示按条件cond根据日收益率进行分组排名', 54: 'Quantile( close/Delay(close,1)-1,5)表示按日收益率分为5档', 55: 'GroupQuantile(close/Delay(close,1)-1,g,5) 表示按日收益率和分组g进行分档，每组分为5档', 56: 'Standardize(close/Delay(close,1)-1) 表示日收益率的标准化', 57: 'Cutoff(close,3) 表示去掉z_score大于3的极值', 58: 'CumToSingle(net_profit)', 59: 'TTM(net_profit)', 60: 'Decay_exp(close,0.9,10)', 61: 'Decay_linear(close,15)', 62: 'Tail(close/open, 0.99, 1.01, 1.0)', 63: 'Step(30)', 64: 'CountNans((close-open)^0.5, 10) 表示过去10天内有几天close小于open', 65: 'Ts_Argmax(high,10)', 66: 'Ts_Argmin(low,10)', 67: "Ta('MACD','macdsignal',open,high,low,close,volume) 表示对每只股票进行talib.macd计算并返回macdsignal的值（自动剔除停牌期数据）."}}
        )[["分类","说明","公式","示例"]]
        self.types = self.doc["分类"].drop_duplicates()
        self.funcs = self.doc["公式"]

    def search_by_type(self, _type):
        result = self.doc["分类"].apply(lambda x:x.find(_type)>-1)
        return self.doc[result]

    def search_by_func(self,func,precise=False):
        if precise:
            result = self.doc["公式"].apply(lambda x: x.find(func) ==0)
        else:
            result = self.doc["公式"].apply(lambda x:x.lower().find(func.lower())>-1)
        return self.doc[result]

    def search_by_description(self,description):
        result = self.doc["说明"].apply(lambda x: x.find(description) > -1)
        return self.doc[result]

if __name__ == "__main__":
    get_doc()